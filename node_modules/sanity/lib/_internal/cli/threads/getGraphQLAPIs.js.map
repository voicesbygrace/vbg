{"version":3,"file":"getGraphQLAPIs.js","sources":["../../../../src/_internal/cli/util/getStudioConfig.ts","../../../../src/_internal/cli/threads/getGraphQLAPIs.ts"],"sourcesContent":["/* eslint-disable no-sync */\nimport fs from 'fs'\nimport path from 'path'\nimport {first} from 'rxjs/operators'\nimport {mockBrowserEnvironment} from './mockBrowserEnvironment'\nimport {resolveConfig, Config, Workspace} from 'sanity'\n\nconst candidates = [\n  'sanity.config.js',\n  'sanity.config.jsx',\n  'sanity.config.ts',\n  'sanity.config.tsx',\n]\n\n/**\n * Note: Don't run this on the main thread, use it a forked process\n */\nexport async function getStudioConfig(options: {\n  configPath?: string\n  basePath: string\n}): Promise<Workspace[]> {\n  let workspaces: Workspace[] | undefined\n\n  const {basePath, configPath: cfgPath} = options\n\n  let cleanup\n  try {\n    cleanup = mockBrowserEnvironment(basePath)\n\n    let configPath = cfgPath\n    if (configPath && !fs.existsSync(configPath)) {\n      throw new Error(`Failed to find config at \"${cfgPath}\"`)\n    } else if (!configPath) {\n      configPath = candidates\n        .map((candidate) => path.join(basePath, candidate))\n        .find((candidate) => fs.existsSync(candidate))\n    }\n\n    if (!configPath) {\n      throw new Error(`Failed to resolve sanity.config.(js|ts) for base path \"${basePath}\"`)\n    }\n\n    let config: Config | undefined\n    try {\n      // eslint-disable-next-line import/no-dynamic-require\n      const mod = require(configPath)\n      config = mod.__esModule && mod.default ? mod.default : mod\n    } catch (err) {\n      throw new Error(`Failed to load configuration file \"${configPath}\":\\n${err.message}`)\n    }\n\n    if (!config) {\n      throw new Error('Configuration did not export expected config shape')\n    }\n\n    workspaces = await resolveConfig(config).pipe(first()).toPromise()\n  } catch (error) {\n    if (cleanup) {\n      cleanup()\n    }\n\n    throw error\n  }\n\n  cleanup()\n\n  if (!workspaces) {\n    throw new Error('Failed to resolve configuration')\n  }\n\n  return workspaces\n}\n","import {isMainThread, parentPort, workerData, MessagePort} from 'worker_threads'\nimport oneline from 'oneline'\nimport {isPlainObject} from 'lodash'\nimport type {Schema} from '@sanity/types'\nimport type {CliV3CommandContext, GraphQLAPIConfig} from '@sanity/cli'\nimport type {SchemaDefinitionish, TypeResolvedGraphQLAPI} from '../actions/graphql/types'\nimport {getStudioConfig} from '../util/getStudioConfig'\nimport {Workspace} from 'sanity'\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\ngetGraphQLAPIsForked(parentPort)\n\nasync function getGraphQLAPIsForked(parent: MessagePort): Promise<void> {\n  const {cliConfig, cliConfigPath, workDir} = workerData\n  const resolved = await resolveGraphQLApis({cliConfig, cliConfigPath, workDir})\n  parent.postMessage(resolved)\n}\n\nasync function resolveGraphQLApis({\n  cliConfig,\n  cliConfigPath,\n  workDir,\n}: Pick<CliV3CommandContext, 'cliConfig' | 'cliConfigPath' | 'workDir'>): Promise<\n  TypeResolvedGraphQLAPI[]\n> {\n  const workspaces = await getStudioConfig({basePath: workDir})\n  const numSources = workspaces.reduce(\n    (count, workspace) => count + workspace.unstable_sources.length,\n    0\n  )\n  const multiSource = numSources > 1\n  const multiWorkspace = workspaces.length > 1\n  const hasGraphQLConfig = Boolean(cliConfig?.graphql)\n\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (numSources === 0) {\n    throw new Error('No sources (project ID / dataset) configured')\n  }\n\n  // We can only automatically configure if there is a single workspace + source in play\n  if ((multiWorkspace || multiSource) && !hasGraphQLConfig) {\n    throw new Error(oneline`\n      Multiple workspaces/sources configured.\n      You must define an array of GraphQL APIs in ${cliConfigPath || 'sanity.cli.js'}\n      and specify which workspace/source to use.\n    `)\n  }\n\n  // No config is defined, but we have a single workspace + source, so use that\n  if (!hasGraphQLConfig) {\n    const {projectId, dataset, schema} = workspaces[0].unstable_sources[0]\n    return [{schemaTypes: getStrippedSchemaTypes(schema), projectId, dataset}]\n  }\n\n  // Explicity defined config\n  const apiDefs = validateCliConfig(cliConfig?.graphql || [])\n  return resolveGraphQLAPIsFromConfig(apiDefs, workspaces)\n}\n\nfunction resolveGraphQLAPIsFromConfig(\n  apiDefs: GraphQLAPIConfig[],\n  workspaces: Workspace[]\n): TypeResolvedGraphQLAPI[] {\n  const resolvedApis: TypeResolvedGraphQLAPI[] = []\n\n  for (const apiDef of apiDefs) {\n    const {workspace: workspaceName, source: sourceName} = apiDef\n    if (!workspaceName && workspaces.length > 1) {\n      throw new Error(\n        'Must define `workspace` name in GraphQL API config when multiple workspaces are defined'\n      )\n    }\n\n    // If we only have a single workspace defined, we can assume that is the intended one,\n    // even if no `workspace` is defined for the GraphQL API\n    const workspace =\n      !workspaceName && workspaces.length === 1\n        ? workspaces[0]\n        : workspaces.find((space) => space.name === (workspaceName || 'default'))\n\n    if (!workspace) {\n      throw new Error(`Workspace \"${workspaceName || 'default'}\" not found`)\n    }\n\n    // If we only have a single source defined, we can assume that is the intended one,\n    // even if no `source` is defined for the GraphQL API\n    const source =\n      !sourceName && workspace.unstable_sources.length === 1\n        ? workspace.unstable_sources[0]\n        : workspace.unstable_sources.find((src) => src.name === (sourceName || 'default'))\n\n    if (!source) {\n      throw new Error(\n        `Source \"${sourceName || 'default'}\" not found in workspace \"${workspaceName || 'default'}\"`\n      )\n    }\n\n    resolvedApis.push({\n      ...apiDef,\n      dataset: source.dataset,\n      projectId: source.projectId,\n      schemaTypes: getStrippedSchemaTypes(source.schema),\n    })\n  }\n\n  return resolvedApis\n}\n\nfunction validateCliConfig(\n  config: GraphQLAPIConfig[],\n  configPath = 'sanity.cli.js'\n): GraphQLAPIConfig[] {\n  if (!Array.isArray(config)) {\n    throw new Error(`\"graphql\" key in \"${configPath}\" must be an array if defined`)\n  }\n\n  if (config.length === 0) {\n    throw new Error(`No GraphQL APIs defined in \"${configPath}\"`)\n  }\n\n  return config\n}\n\nfunction getStrippedSchemaTypes(schema: Schema): SchemaDefinitionish[] {\n  const schemaDef = schema._original || {types: []}\n  return schemaDef.types.map((type) => stripType(type))\n}\n\nfunction stripType(input: unknown): SchemaDefinitionish {\n  return strip(input) as SchemaDefinitionish\n}\n\nfunction strip(input: unknown): unknown {\n  if (Array.isArray(input)) {\n    return input.map((item) => strip(item)).filter((item) => typeof item !== 'undefined')\n  }\n\n  if (isPlainishObject(input)) {\n    return Object.keys(input).reduce((stripped, key) => {\n      stripped[key] = strip(input[key])\n      return stripped\n    }, {} as Record<string, unknown>)\n  }\n\n  return isBasicType(input) ? input : undefined\n}\n\nfunction isPlainishObject(input: unknown): input is Record<string, unknown> {\n  return isPlainObject(input)\n}\n\nfunction isBasicType(input: unknown): boolean {\n  const type = typeof input\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return true\n  }\n\n  if (type !== 'object') {\n    return false\n  }\n\n  return Array.isArray(input) || input === null || isPlainishObject(input)\n}\n"],"names":["candidates","getStudioConfig","options","workspaces","basePath","configPath","cfgPath","cleanup","mockBrowserEnvironment","fs","existsSync","Error","map","candidate","path","join","find","config","mod","require","__esModule","default","err","message","resolveConfig","pipe","first","toPromise","error","isMainThread","parentPort","getGraphQLAPIsForked","parent","cliConfig","cliConfigPath","workDir","workerData","resolved","resolveGraphQLApis","postMessage","numSources","reduce","count","workspace","unstable_sources","length","multiSource","multiWorkspace","hasGraphQLConfig","Boolean","graphql","oneline","projectId","dataset","schema","schemaTypes","getStrippedSchemaTypes","apiDefs","validateCliConfig","resolveGraphQLAPIsFromConfig","resolvedApis","apiDef","workspaceName","source","sourceName","space","name","src","push","Array","isArray","schemaDef","_original","types","type","stripType","input","strip","item","filter","isPlainishObject","Object","keys","stripped","key","isBasicType","isPlainObject"],"mappings":"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"}