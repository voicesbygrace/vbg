'use strict';

const _excluded = ["schemaTypes"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var path = require('path');
var worker_threads = require('worker_threads');
var readPkgUp = require('read-pkg-up');
var sanity = require('sanity');
function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var readPkgUp__default = /*#__PURE__*/_interopDefaultLegacy(readPkgUp);
async function getGraphQLAPIs(cliContext) {
  if (!isModernCliConfig(cliContext)) {
    throw new Error("Expected Sanity studio of version 3 or above");
  }
  if (!worker_threads.isMainThread) {
    throw new Error("getGraphQLAPIs() must be called from the main thread");
  }
  const defaultSchema = sanity.createSchema({
    name: "default",
    types: []
  });
  const defaultTypes = defaultSchema.getTypeNames();
  const isCustomType = type => !defaultTypes.includes(type.name);
  const apis = await getApisWithSchemaTypes(cliContext);
  const resolved = apis.map(_ref => {
    let {
        schemaTypes
      } = _ref,
      api = _objectWithoutProperties(_ref, _excluded);
    return _objectSpread({
      schema: sanity.createSchema({
        name: "default",
        types: schemaTypes.filter(isCustomType)
      })
    }, api);
  });
  return resolved;
}
function getApisWithSchemaTypes(cliContext) {
  return new Promise((resolve, reject) => {
    var _a;
    const {
      cliConfig,
      cliConfigPath,
      workDir
    } = cliContext;
    const rootPkgPath = (_a = readPkgUp__default["default"].sync({
      cwd: __dirname
    })) == null ? void 0 : _a.path;
    if (!rootPkgPath) {
      throw new Error("Could not find root directory for `sanity` package");
    }
    const rootDir = path__default["default"].dirname(rootPkgPath);
    const workerPath = path__default["default"].join(rootDir, "lib", "_internal", "cli", "threads", "getGraphQLAPIs.js");
    const worker = new worker_threads.Worker(workerPath, {
      workerData: {
        cliConfig: serialize(cliConfig),
        cliConfigPath,
        workDir
      }
    });
    worker.on("message", resolve);
    worker.on("error", reject);
    worker.on("exit", code => {
      if (code !== 0) reject(new Error("Worker stopped with exit code ".concat(code)));
    });
  });
}
function isModernCliConfig(config) {
  return config.sanityMajorVersion >= 3;
}
function serialize(obj) {
  return JSON.parse(JSON.stringify(obj));
}
exports.getGraphQLAPIs = getGraphQLAPIs;
//# sourceMappingURL=getGraphQLAPIs-9c75cb2a.js.map
