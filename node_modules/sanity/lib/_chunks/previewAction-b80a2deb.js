'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var path = require('path');
var server = require('@sanity/server');
var servers = require('./servers-0d372c5a.js');
function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
async function startSanityPreviewServer(args, context) {
  const flags = args.extOptions;
  const {
    workDir,
    cliConfig
  } = context;
  const defaultRootDir = path__default["default"].resolve(path__default["default"].join(workDir, "dist"));
  const rootDir = path__default["default"].resolve(args.argsWithoutOptions[0] || defaultRootDir);
  const config = getPreviewServerConfig({
    flags,
    workDir,
    cliConfig,
    rootDir
  });
  try {
    await server.startPreviewServer(config);
  } catch (err) {
    servers.gracefulServerDeath("preview", config.httpHost, config.httpPort, err);
  }
}
function getPreviewServerConfig(_ref) {
  let {
    flags,
    workDir,
    cliConfig,
    rootDir
  } = _ref;
  const baseConfig = servers.getSharedServerConfig({
    flags,
    workDir,
    cliConfig
  });
  return _objectSpread(_objectSpread({}, baseConfig), {}, {
    root: rootDir
  });
}
exports["default"] = startSanityPreviewServer;
//# sourceMappingURL=previewAction-b80a2deb.js.map
