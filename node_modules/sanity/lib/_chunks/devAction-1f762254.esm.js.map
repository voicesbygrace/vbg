{"version":3,"file":"devAction-1f762254.esm.js","sources":["../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import path from 'path'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore The `@sanity/server` may not be built yet.\nimport {DevServerOptions, startDevServer} from '@sanity/server'\nimport type {CliConfig, CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {getTimer} from '../../util/timing'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\n\nexport interface StartDevServerCommandFlags {\n  host?: string\n  port?: string\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext\n): Promise<void> {\n  const timers = getTimer()\n  const flags = args.extOptions\n  const {output, workDir, cliConfig} = context\n\n  timers.start('checkStudioDependencyVersions')\n  checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const configSpinner = output.spinner('Checking configuration files...')\n  const config = getDevServerConfig({flags, workDir, cliConfig})\n  configSpinner.succeed()\n\n  try {\n    await startDevServer(config)\n  } catch (err) {\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nfunction getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n}: {\n  flags: StartDevServerCommandFlags\n  workDir: string\n  cliConfig?: CliConfig\n}): DevServerOptions {\n  const baseConfig = getSharedServerConfig({flags, workDir, cliConfig})\n  const env = process.env // eslint-disable-line no-process-env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n  }\n}\n"],"names":["startSanityDevServer","args","context","timers","getTimer","flags","extOptions","output","workDir","cliConfig","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","configSpinner","spinner","config","getDevServerConfig","succeed","startDevServer","err","gracefulServerDeath","httpHost","httpPort","baseConfig","getSharedServerConfig","env","process","reactStrictMode","SANITY_STUDIO_REACT_STRICT_MODE","Boolean","staticPath","path","join"],"mappings":";;;;;;;;;;;;;;;AAe8B,eAAAA,oBAAA,CAC5BC,MACAC,OACe,EAAA;EACf,MAAMC,SAASC,QAAS,EAAA;EACxB,MAAMC,QAAQJ,IAAK,CAAAK,UAAA;EACnB,MAAM;IAACC,MAAA;IAAQC,OAAS;IAAAC;EAAA,CAAa,GAAAP,OAAA;EAErCC,MAAA,CAAOO,MAAM,+BAA+B,CAAA;EAC5CC,6BAAA,CAA8BH,OAAO,CAAA;EACrCL,MAAA,CAAOS,IAAI,+BAA+B,CAAA;EAI1C,IAAA,CAAK,MAAMC,yBAAA,CAA0BX,OAAO,CAAA,EAAGY,UAAY,EAAA;IACzD;EACF;EAGM,MAAAC,aAAA,GAAgBR,MAAO,CAAAS,OAAA,CAAQ,iCAAiC,CAAA;EACtE,MAAMC,SAASC,kBAAmB,CAAA;IAACb,KAAO;IAAAG,OAAA;IAASC;GAAU,CAAA;EAC7DM,aAAA,CAAcI,OAAQ,EAAA;EAElB,IAAA;IACF,MAAMC,eAAeH,MAAM,CAAA;WACpBI,GAAP,EAAA;IACAC,mBAAA,CAAoB,KAAO,EAAAL,MAAA,CAAOM,QAAU,EAAAN,MAAA,CAAOO,UAAUH,GAAG,CAAA;EAClE;AACF;AAEA,SAASH,kBAAmB,OAQP;EAAA,IARO;IAC1Bb,KAAA;IACAG,OAAA;IACAC;EACF,CAIqB;EACnB,MAAMgB,aAAaC,qBAAsB,CAAA;IAACrB,KAAO;IAAAG,OAAA;IAASC;GAAU,CAAA;EACpE,MAAMkB,MAAMC,OAAQ,CAAAD,GAAA;EACd,MAAAE,eAAA,GAAkBF,IAAIG,+BACxB,GAAAH,GAAA,CAAIG,oCAAoC,MACxC,GAAAC,OAAA,CAAQtB,uCAAWoB,eAAe,CAAA;EAE/B,uCACFJ,UAAA;IACHO,UAAY,EAAAC,IAAA,CAAKC,IAAK,CAAA1B,OAAA,EAAS,QAAQ,CAAA;IACvCqB;EAAA;AAEJ;"}