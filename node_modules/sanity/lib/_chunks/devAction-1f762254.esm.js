function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
import path from 'path';
import { startDevServer } from '@sanity/server';
import { c as checkStudioDependencyVersions, a as checkRequiredDependencies, g as getTimer } from './timing-033daeeb.esm.js';
import { g as gracefulServerDeath, a as getSharedServerConfig } from './servers-4901109f.esm.js';
import 'fs';
import 'semver';
import 'resolve-from';
import '@sanity/generate-help-url';
import 'fs/promises';
import 'execa';
import 'oneline';
import 'perf_hooks';
async function startSanityDevServer(args, context) {
  const timers = getTimer();
  const flags = args.extOptions;
  const {
    output,
    workDir,
    cliConfig
  } = context;
  timers.start("checkStudioDependencyVersions");
  checkStudioDependencyVersions(workDir);
  timers.end("checkStudioDependencyVersions");
  if ((await checkRequiredDependencies(context)).didInstall) {
    return;
  }
  const configSpinner = output.spinner("Checking configuration files...");
  const config = getDevServerConfig({
    flags,
    workDir,
    cliConfig
  });
  configSpinner.succeed();
  try {
    await startDevServer(config);
  } catch (err) {
    gracefulServerDeath("dev", config.httpHost, config.httpPort, err);
  }
}
function getDevServerConfig(_ref) {
  let {
    flags,
    workDir,
    cliConfig
  } = _ref;
  const baseConfig = getSharedServerConfig({
    flags,
    workDir,
    cliConfig
  });
  const env = process.env;
  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE ? env.SANITY_STUDIO_REACT_STRICT_MODE === "true" : Boolean(cliConfig == null ? void 0 : cliConfig.reactStrictMode);
  return _objectSpread(_objectSpread({}, baseConfig), {}, {
    staticPath: path.join(workDir, "static"),
    reactStrictMode
  });
}
export { startSanityDevServer as default };
//# sourceMappingURL=devAction-1f762254.esm.js.map
