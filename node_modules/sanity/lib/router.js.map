{"version":3,"file":"router.js","sources":["../src/router/RouterContext.ts","../src/router/useRouter.ts","../src/router/useLink.ts","../src/router/useIntentLink.ts","../src/router/IntentLink.tsx","../src/router/Link.tsx","../src/router/utils/hasOwn.ts","../src/router/utils/isEmpty.ts","../src/router/RouteScope.tsx","../src/router/RouterProvider.tsx","../src/router/useStateLink.ts","../src/router/StateLink.tsx","../src/router/_parseRoute.ts","../src/router/utils/debug.ts","../src/router/utils/arrayify.ts","../src/router/_resolveStateFromPath.ts","../src/router/_findMatchingRoutes.ts","../src/router/_resolvePathFromState.ts","../src/router/utils/jsonParamsEncoding.ts","../src/router/utils/paramsEncoding.ts","../src/router/route.ts","../src/router/useRouterState.ts","../src/router/withRouter.tsx"],"sourcesContent":["import React from 'react'\nimport {RouterContextValue} from './types'\n\n/**\n * @internal\n */\nexport const RouterContext = React.createContext<RouterContextValue | null>(null)\n","import {useContext} from 'react'\nimport {RouterContext} from './RouterContext'\nimport {RouterContextValue} from './types'\n\n/**\n * @public\n */\nexport function useRouter(): RouterContextValue {\n  const router = useContext(RouterContext)\n\n  if (!router) {\n    throw new Error('Router: missing context value')\n  }\n\n  return router\n}\n","import {useCallback} from 'react'\nimport {useRouter} from './useRouter'\n\nfunction isLeftClickEvent(event: React.MouseEvent) {\n  return event.button === 0\n}\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)\n}\n\n/**\n * @public\n */\nexport function useLink(props: {\n  href?: string\n  onClick?: React.MouseEventHandler<HTMLElement>\n  replace?: boolean\n  target?: string\n}): {onClick: React.MouseEventHandler<HTMLElement>} {\n  const {onClick: onClickProp, href, target, replace = false} = props\n  const {navigateUrl} = useRouter()\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>): void => {\n      if (event.isDefaultPrevented()) {\n        return\n      }\n\n      if (!href) return\n\n      if (onClickProp) {\n        onClickProp(event)\n      }\n\n      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n        return\n      }\n\n      // If target prop is set (e.g. to \"_blank\") let browser handle link.\n      if (target) {\n        return\n      }\n\n      event.preventDefault()\n\n      navigateUrl({path: href, replace})\n    },\n    [href, navigateUrl, onClickProp, replace, target]\n  )\n\n  return {onClick: onClick}\n}\n","import {IntentParameters} from './types'\nimport {useLink} from './useLink'\nimport {useRouter} from './useRouter'\n\n/**\n *\n * @example\n * ```tsx\n * import {useIntentLink} from 'sanity'\n *\n * const {onClick, href} = useIntentLink({\n *   intent: 'edit',\n *   params: {id: 'foo'}\n * })\n *\n * <a href={href} onClick={onClick}>Link to \"foo\" editor</a>\n * ```\n *\n * @public\n */\nexport function useIntentLink(props: {\n  intent: string\n  onClick?: React.MouseEventHandler<HTMLElement>\n  params?: IntentParameters\n  replace?: boolean\n  target?: string\n}): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {intent, onClick: onClickProp, params, replace, target} = props\n  const {resolveIntentLink} = useRouter()\n  const href = resolveIntentLink(intent, params)\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import React, {ForwardedRef, forwardRef} from 'react'\nimport {IntentParameters} from './types'\nimport {useIntentLink} from './useIntentLink'\n\n/**\n * @public\n */\nexport interface IntentLinkProps {\n  intent: string\n  params?: IntentParameters\n  replace?: boolean\n}\n\n/**\n * @public\n */\nexport const IntentLink = forwardRef(function IntentLink(\n  props: IntentLinkProps & React.HTMLProps<HTMLAnchorElement>,\n  ref: ForwardedRef<HTMLAnchorElement>\n) {\n  const {intent, params, target, ...restProps} = props\n  const {onClick, href} = useIntentLink({\n    intent,\n    params,\n    target,\n    onClick: props.onClick,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} target={target} />\n})\n","import React, {forwardRef} from 'react'\nimport {useLink} from './useLink'\n\n/**\n * @public\n */\nexport interface LinkProps {\n  replace?: boolean\n}\n\n/**\n * @public\n */\nexport const Link = forwardRef(function Link(\n  props: LinkProps & React.HTMLProps<HTMLAnchorElement>,\n  ref: React.ForwardedRef<HTMLAnchorElement>\n) {\n  const {onClick: onClickProp, href, target, replace, ...restProps} = props\n  const {onClick} = useLink({onClick: onClickProp, href, target, replace})\n\n  return <a {...restProps} onClick={onClick} href={href} target={target} ref={ref} />\n})\n","const _hasOWn = Object.prototype.hasOwnProperty\n\nexport const hasOwn = _hasOWn.call.bind(_hasOWn)\n","import {hasOwn} from './hasOwn'\n\nexport function isEmpty(object: Record<string, unknown>): boolean {\n  for (const key in object) {\n    if (hasOwn(object, key)) {\n      return false\n    }\n  }\n\n  return true\n}\n","/* eslint-disable camelcase */\n\nimport React, {useCallback, useMemo} from 'react'\nimport {isEmpty} from './utils/isEmpty'\nimport {RouterContext} from './RouterContext'\nimport {NavigateOptions, RouterContextValue} from './types'\nimport {useRouter} from './useRouter'\n\nfunction addScope(\n  routerState: Record<string, any>,\n  scope: string,\n  scopedState: Record<string, any>\n) {\n  return (\n    scopedState && {\n      ...routerState,\n      [scope]: scopedState,\n    }\n  )\n}\n\n/**\n * @public\n */\nexport interface RouteScopeProps {\n  scope: string\n  children: React.ReactNode\n}\n\n/**\n * @public\n */\nexport function RouteScope(props: RouteScopeProps): React.ReactElement {\n  const {children, scope} = props\n  const parent = useRouter()\n  const {resolvePathFromState: parent_resolvePathFromState, navigate: parent_navigate} = parent\n\n  const resolvePathFromState = useCallback(\n    (nextState: Record<string, any>): string => {\n      const nextStateScoped: Record<string, any> = isEmpty(nextState)\n        ? {}\n        : addScope(parent.state, scope, nextState)\n\n      return parent_resolvePathFromState(nextStateScoped)\n    },\n    [parent_resolvePathFromState, parent.state, scope]\n  )\n\n  const navigate = useCallback(\n    (nextState: Record<string, any>, options?: NavigateOptions): void => {\n      const nextScopedState = addScope(parent.state, scope, nextState)\n      parent_navigate(nextScopedState, options)\n    },\n    [parent_navigate, parent.state, scope]\n  )\n\n  const scopedRouter: RouterContextValue = useMemo(\n    () => ({\n      ...parent,\n      navigate,\n      resolvePathFromState,\n      state: parent.state[scope] as any,\n    }),\n    [navigate, parent, resolvePathFromState, scope]\n  )\n\n  return <RouterContext.Provider value={scopedRouter}>{children}</RouterContext.Provider>\n}\n","import React, {useCallback, useMemo} from 'react'\nimport {RouterContext} from './RouterContext'\nimport {IntentParameters, RouterContextValue, NavigateOptions, Router, RouterState} from './types'\n\n/**\n * @public\n */\nexport interface RouterProviderProps {\n  onNavigate: (opts: {path: string; replace?: boolean}) => void\n  router: Router\n  state: RouterState\n  children: React.ReactNode\n}\n\n/**\n * @example\n * ```tsx\n * import {\n *   NavigateOptions,\n *   route,\n *   RouterProvider,\n *   RouterState\n * } from 'sanity'\n * import {useCallback, useMemo} from 'react'\n *\n * function Root() {\n *   const router = useMemo(() => route.create('/'), [])\n *\n *   const [state, setState] = useState<RouterState>({})\n *\n *   const handleNavigate = useCallback((\n *     path: string,\n *     options?: NavigateOptions\n *   ) => {\n *     console.log('navigate', path, options)\n *\n *     setState(router.decode(path))\n *   }, [router])\n *\n *   return (\n *     <RouterProvider\n *       onNavigate={handleNavigate}\n *       router={router}\n *       state={state}\n *     >\n *       <div>This is a routed application</div>\n *     </RouterProvider>\n *   )\n * }\n * ```\n *\n * @public\n */\nexport function RouterProvider(props: RouterProviderProps): React.ReactElement {\n  // TODO: can we do nested routes?\n  const {onNavigate, router: routerProp, state} = props\n\n  const navigateUrl = useCallback(\n    (opts: {path: string; replace?: boolean}) => {\n      onNavigate(opts)\n    },\n    [onNavigate]\n  )\n\n  const resolveIntentLink = useCallback(\n    (intentName: string, parameters?: IntentParameters): string => {\n      const [params, payload] = Array.isArray(parameters) ? parameters : [parameters]\n      return routerProp.encode({intent: intentName, params, payload})\n    },\n    [routerProp]\n  )\n\n  const resolvePathFromState = useCallback(\n    (nextState: Record<string, unknown>): string => {\n      return routerProp.encode(nextState)\n    },\n    [routerProp]\n  )\n\n  const navigate = useCallback(\n    (nextState: Record<string, unknown>, options: NavigateOptions = {}) => {\n      navigateUrl({path: resolvePathFromState(nextState), replace: options.replace})\n    },\n    [navigateUrl, resolvePathFromState]\n  )\n\n  const navigateIntent = useCallback(\n    (intentName: string, params?: IntentParameters, options: NavigateOptions = {}) => {\n      navigateUrl({path: resolveIntentLink(intentName, params), replace: options.replace})\n    },\n    [navigateUrl, resolveIntentLink]\n  )\n\n  const router: RouterContextValue = useMemo(\n    () => ({\n      navigate,\n      navigateIntent,\n      navigateUrl,\n      resolveIntentLink,\n      resolvePathFromState,\n      state,\n    }),\n    [navigate, navigateIntent, navigateUrl, resolveIntentLink, resolvePathFromState, state]\n  )\n\n  return <RouterContext.Provider value={router}>{props.children}</RouterContext.Provider>\n}\n","import React, {useMemo} from 'react'\nimport {useRouter} from './useRouter'\nimport {useLink} from './useLink'\n\nconst EMPTY_STATE = {}\n\n/**\n * @public\n */\nexport function useStateLink(props: {\n  onClick?: React.MouseEventHandler<HTMLElement>\n  replace?: boolean\n  state?: Record<string, unknown>\n  target?: string\n  toIndex?: boolean\n}): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {onClick: onClickProp, replace, state, target, toIndex = false} = props\n\n  if (state && toIndex) {\n    throw new Error('Passing both `state` and `toIndex={true}` as props to StateLink is invalid')\n  }\n\n  if (!state && !toIndex) {\n    // eslint-disable-next-line no-console\n    console.error(\n      new Error(\n        'No state passed to StateLink. If you want to link to an empty state, its better to use the the `toIndex` property'\n      )\n    )\n  }\n\n  const {resolvePathFromState} = useRouter()\n\n  const href = useMemo(\n    () => resolvePathFromState(toIndex ? EMPTY_STATE : state || EMPTY_STATE),\n    [resolvePathFromState, state, toIndex]\n  )\n\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import React, {forwardRef} from 'react'\nimport {useStateLink} from './useStateLink'\n\n/**\n * @public\n */\nexport interface StateLinkProps {\n  replace?: boolean\n  state?: Record<string, unknown>\n  toIndex?: boolean\n}\n\n/**\n * @public\n */\nexport const StateLink = forwardRef(function StateLink(\n  props: StateLinkProps & Omit<React.HTMLProps<HTMLAnchorElement>, 'href'>,\n  ref: React.ForwardedRef<HTMLAnchorElement>\n) {\n  const {onClick: onClickProp, replace, state, target, toIndex = false, ...restProps} = props\n  const {onClick, href} = useStateLink({\n    onClick: onClickProp,\n    replace,\n    state,\n    target,\n    toIndex,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} />\n})\n","import {Route, RouteSegment} from './types'\n\nconst VALID_PARAM_SEGMENT = /^[a-zA-Z0-9_-]+$/\n\nfunction createSegment(segment: string): RouteSegment | null {\n  if (!segment) {\n    return null\n  }\n\n  if (segment.startsWith(':')) {\n    const paramName = segment.substring(1)\n\n    if (!VALID_PARAM_SEGMENT.test(paramName)) {\n      const addendum = segment.includes('*')\n        ? ' Splats are not supported. Consider using child routes instead'\n        : ''\n      // eslint-disable-next-line no-console\n      console.error(\n        new Error(`Warning: Param segments \"${segment}\" includes invalid characters.${addendum}`)\n      )\n    }\n\n    return {type: 'param', name: paramName}\n  }\n\n  return {type: 'dir', name: segment}\n}\n\n/** @internal */\nexport function _parseRoute(route: string): Route {\n  const [pathname] = route.split('?')\n\n  const segments = pathname.split('/').map(createSegment).filter(Boolean) as RouteSegment[]\n\n  return {\n    raw: route,\n    segments: segments,\n  }\n}\n","import Debug from 'debug'\n\nexport const debug = Debug('state-router')\n","export function arrayify<T>(val: Array<T> | T): Array<T> {\n  if (Array.isArray(val)) {\n    return val\n  }\n\n  return val ? [val] : []\n}\n","import {RouterNode} from './types'\nimport {debug} from './utils/debug'\nimport {arrayify} from './utils/arrayify'\n\nfunction matchPath(node: RouterNode, path: string): Record<string, string> | null {\n  const parts = path.split('/').filter(Boolean)\n  const segmentsLength = node.route.segments.length\n\n  if (parts.length < segmentsLength) {\n    return null\n  }\n\n  const state: Record<string, unknown> = {}\n  const isMatching = node.route.segments.every((segment, i) => {\n    if (segment.type === 'dir') {\n      return segment.name === parts[i]\n    }\n\n    const transform = node.transform && node.transform[segment.name]\n\n    state[segment.name] = transform ? transform.toState(parts[i]) : parts[i]\n\n    return true\n  })\n\n  if (!isMatching) {\n    return null\n  }\n\n  const rest = parts.slice(segmentsLength)\n\n  let childState: {\n    [key: string]: string\n  } | null = null\n\n  const children =\n    typeof node.children === 'function' ? arrayify(node.children(state)) : node.children\n\n  children.some((childNode) => {\n    // console.log('----childNode')\n    // console.log(childNode)\n    // console.log('----childNode')\n\n    if (childNode) {\n      childState = matchPath(childNode, rest.join('/'))\n\n      return childState\n    }\n\n    return undefined\n  })\n\n  if (rest.length > 0 && !childState) {\n    return null\n  }\n\n  const mergedState = {...state, ...(childState || {})}\n\n  return node.scope ? {[node.scope]: mergedState} : mergedState\n}\n\n/**\n * @internal\n */\nexport function _resolveStateFromPath(node: RouterNode, path: string): Record<string, any> | null {\n  debug('resolving state from path %s', path)\n\n  const pathMatch = matchPath(node, path.split('?')[0])\n\n  debug('resolved: %o', pathMatch || null)\n\n  return pathMatch || null\n}\n","import {difference, intersection, isPlainObject, pick} from 'lodash'\nimport {RouterNode, MatchResult} from './types'\nimport {arrayify} from './utils/arrayify'\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return isPlainObject(value)\n}\n\nfunction createMatchResult(\n  nodes: RouterNode[],\n  missing: string[],\n  remaining: string[]\n): MatchResult {\n  return {nodes, missing, remaining}\n}\n\n/** @internal */\nexport function _findMatchingRoutes(\n  node: RouterNode,\n  _state?: Record<string, unknown>\n): MatchResult {\n  if (!_state) {\n    return createMatchResult([], [], [])\n  }\n\n  const state = node.scope ? _state[node.scope] : _state\n\n  const requiredParams = node.route.segments\n    .filter((seg) => seg.type === 'param')\n    .map((seg) => seg.name)\n\n  const stateKeys = isRecord(state) ? Object.keys(state) : []\n\n  const consumedParams = intersection(stateKeys, requiredParams)\n  const missingParams = difference(requiredParams, consumedParams)\n  const remainingParams = difference(stateKeys, consumedParams)\n\n  if (missingParams.length > 0) {\n    return createMatchResult([], missingParams, [])\n  }\n\n  if (remainingParams.length === 0) {\n    return createMatchResult([node], [], [])\n  }\n\n  const children = arrayify(\n    (typeof node.children === 'function'\n      ? node.children(isRecord(state) ? state : {})\n      : node.children) || []\n  )\n\n  if (remainingParams.length > 0 && children.length === 0) {\n    return createMatchResult([], remainingParams, [])\n  }\n\n  const remainingState = pick(state, remainingParams)\n\n  let matchingChild: MatchResult = {nodes: [], remaining: [], missing: []}\n\n  arrayify(children).some((childNode) => {\n    matchingChild = _findMatchingRoutes(childNode, remainingState)\n    return matchingChild.nodes.length > 0\n  })\n\n  if (matchingChild.nodes.length === 0) {\n    return createMatchResult([], missingParams, remainingParams)\n  }\n\n  return createMatchResult(\n    [node, ...matchingChild.nodes],\n    matchingChild.missing,\n    matchingChild.remaining\n  )\n}\n","import {flatten} from 'lodash'\nimport {_findMatchingRoutes} from './_findMatchingRoutes'\nimport {RouterNode, MatchResult} from './types'\nimport {debug} from './utils/debug'\n\n/** @internal */\nexport function _resolvePathFromState(node: RouterNode, state: Record<string, unknown>): string {\n  debug('Resolving path from state %o', state)\n\n  const match: MatchResult = _findMatchingRoutes(node, state)\n\n  if (match.remaining.length > 0) {\n    const remaining = match.remaining\n    throw new Error(\n      `Unable to find matching route for state. Could not map the following state key${\n        remaining.length == 1 ? '' : 's'\n      } to a valid url: ${remaining.join(', ')}`\n    )\n  }\n\n  if (match.nodes.length === 0) {\n    throw new Error(`Unable to resolve path from given state: ${JSON.stringify(state)}`)\n  }\n\n  let scopedState: Record<string, unknown> = state\n\n  const relative = flatten(\n    match.nodes.map((matchNode) => {\n      if (matchNode.scope && matchNode.scope in scopedState) {\n        scopedState = scopedState[matchNode.scope] as Record<string, unknown>\n      }\n\n      return matchNode.route.segments.map((segment) => {\n        if (segment.type === 'dir') {\n          return segment.name\n        }\n\n        const transform = matchNode.transform && matchNode.transform[segment.name]\n\n        return transform\n          ? transform.toPath(scopedState[segment.name] as any)\n          : scopedState[segment.name]\n      })\n    })\n  ).join('/')\n\n  debug('Resolved to /%s', relative)\n\n  return `/${relative}`\n}\n","export function decodeJsonParams(pathsegment = ''): Record<string, unknown> {\n  const segment = decodeURIComponent(pathsegment)\n\n  if (!segment) {\n    return {}\n  }\n\n  try {\n    return JSON.parse(atob(segment))\n  } catch (err) {\n    // Maybe try the old format (non-base64 encoded)\n  }\n\n  try {\n    return JSON.parse(segment)\n  } catch (err) {\n    console.warn('Failed to parse JSON parameters')\n  }\n\n  return {}\n}\n\nexport function encodeJsonParams(params?: Record<string, unknown>): string {\n  return params ? btoa(JSON.stringify(params)) : ''\n}\n","export function decodeParams(pathSegment: string): Record<string, string> {\n  return pathSegment.split(';').reduce<Record<string, string>>((params, pair) => {\n    const [key, value] = pair.split('=')\n\n    params[decodeURIComponent(key)] = decodeURIComponent(value)\n\n    return params\n  }, {})\n}\n\nexport function encodeParams(params: Record<string, string | undefined | null>): string {\n  return Object.entries(params)\n    .filter(([, value]) => value !== undefined && value !== null)\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value as string)}`)\n    .join(';')\n}\n","import {_parseRoute} from './_parseRoute'\nimport {_resolveStateFromPath} from './_resolveStateFromPath'\nimport {_resolvePathFromState} from './_resolvePathFromState'\nimport {RouteTransform, Router, RouteChildren} from './types'\nimport {decodeJsonParams, encodeJsonParams} from './utils/jsonParamsEncoding'\nimport {decodeParams, encodeParams} from './utils/paramsEncoding'\n\n/**\n * @public\n */\nexport type RouteNodeOptions = {\n  path?: string\n  children?: RouteChildren\n  transform?: {\n    [key: string]: RouteTransform<any>\n  }\n  scope?: string\n}\n\n/**\n * @public\n */\nexport const route: {\n  create: (\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren\n  ) => Router\n  intents: (base: string) => Router\n  scope: (scopeName: string, ...rest: any[]) => Router\n} = {create: createRoute, scope: routeScope, intents: routeIntents}\n\nfunction normalizeChildren(children: any): RouteChildren {\n  if (Array.isArray(children) || typeof children === 'function') {\n    return children\n  }\n  return children ? [children] : []\n}\n\nfunction isRoute(val?: RouteNodeOptions | Router | RouteChildren) {\n  return val && '_isRoute' in val\n}\n\nfunction normalizeArgs(...args: any[]): RouteNodeOptions\nfunction normalizeArgs(\n  path: string | RouteNodeOptions,\n  childrenOrOpts?: RouteNodeOptions | Router | RouteChildren,\n  children?: Router | RouteChildren\n): RouteNodeOptions {\n  if (typeof path === 'object') {\n    return path\n  }\n\n  if (\n    Array.isArray(childrenOrOpts) ||\n    typeof childrenOrOpts === 'function' ||\n    isRoute(childrenOrOpts)\n  ) {\n    return {path, children: normalizeChildren(childrenOrOpts)}\n  }\n\n  if (children) {\n    return {path, ...childrenOrOpts, children: normalizeChildren(children)}\n  }\n\n  return {path, ...childrenOrOpts}\n}\n\nfunction createRoute(\n  routeOrOpts: RouteNodeOptions | string,\n  childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n  children?: Router | RouteChildren\n): Router {\n  return createNode(normalizeArgs(routeOrOpts, childrenOrOpts, children))\n}\n\nfunction routeScope(scopeName: string, ...rest: any[]): Router {\n  const options = normalizeArgs(...rest)\n\n  return createNode({\n    ...options,\n    scope: scopeName,\n  })\n}\n\nfunction normalize(...paths: string[]) {\n  return paths.reduce<string[]>((acc, path) => acc.concat(path.split('/')), []).filter(Boolean)\n}\n\nfunction routeIntents(base: string): Router {\n  const basePath = normalize(base).join('/')\n\n  return route.create(`${basePath}/:intent`, [\n    route.create(\n      ':params',\n      {\n        transform: {\n          params: {\n            toState: decodeParams,\n            toPath: encodeParams,\n          },\n        },\n      },\n      [\n        route.create(':payload', {\n          transform: {\n            payload: {\n              toState: decodeJsonParams,\n              toPath: encodeJsonParams,\n            },\n          },\n        }),\n      ]\n    ),\n  ])\n}\n\nconst EMPTY_STATE = {}\n\nfunction isRoot(pathname: string): boolean {\n  // it is the root if every segment is an empty string\n  return pathname.split('/').every((segment) => !segment)\n}\n\nfunction createNode(options: RouteNodeOptions): Router {\n  const {path, scope, transform, children} = options\n\n  if (!path) {\n    throw new TypeError('Missing path')\n  }\n\n  const parsedRoute = _parseRoute(path)\n\n  return {\n    _isRoute: true, // todo: make a Router class instead\n    scope,\n    route: parsedRoute,\n    children: children || [],\n    transform,\n    encode(state) {\n      return _resolvePathFromState(this, state)\n    },\n    decode(_path) {\n      return _resolveStateFromPath(this, _path)\n    },\n    isRoot: isRoot,\n    isNotFound(pathname: string): boolean {\n      return this.decode(pathname) === null\n    },\n    getBasePath(): string {\n      return this.encode(EMPTY_STATE)\n    },\n    getRedirectBase(pathname: string): string | null {\n      if (isRoot(pathname)) {\n        const basePath = this.getBasePath()\n        // Check if basepath is something different than given\n        if (pathname !== basePath) {\n          return basePath\n        }\n      }\n      return null\n    },\n  }\n}\n","import {identity} from 'lodash'\nimport {useEffect, useState} from 'react'\nimport {RouterState} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n */\nexport function useRouterState<R = RouterState>(selector: (routerState: RouterState) => R): R\n\n/**\n * @public\n */\nexport function useRouterState(): RouterState\n\n/**\n * @public\n */\nexport function useRouterState(\n  selector: (routerState: RouterState) => unknown = identity\n): unknown {\n  const {state} = useRouter()\n  const [selectedState, setState] = useState(() => selector(state))\n\n  // reset the state when the `selector` prop changes\n  useEffect(() => setState(selector(state)), [selector, state])\n\n  return selectedState\n}\n","import React, {ComponentType, FunctionComponent} from 'react'\nimport {RouterContextValue} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n */\nexport function withRouter<Props extends {router: RouterContextValue}>(\n  Component: ComponentType<Props>\n): FunctionComponent<Omit<Props, 'router'>> {\n  function WithRouter(props: Omit<Props, 'router'>) {\n    const router = useRouter()\n\n    return <Component {...(props as Props)} router={router} />\n  }\n\n  WithRouter.displayName = `withRouter(${Component.displayName || Component.name})`\n\n  return WithRouter\n}\n\n/**\n * @public\n */\nexport interface WithRouterProps {\n  router: RouterContextValue\n  children: (router: RouterContextValue) => React.ReactElement\n}\n\n/**\n * @public\n */\nexport const WithRouter = withRouter((props: WithRouterProps) => props.children(props.router))\n"],"names":["RouterContext","React","createContext","useRouter","router","useContext","Error","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","useLink","props","onClick","onClickProp","href","target","replace","navigateUrl","useCallback","isDefaultPrevented","preventDefault","path","useIntentLink","intent","params","resolveIntentLink","IntentLink","forwardRef","ref","restProps","jsx","Link","_hasOWn","Object","prototype","hasOwnProperty","hasOwn","call","bind","isEmpty","object","key","addScope","routerState","scope","scopedState","RouteScope","children","parent","resolvePathFromState","parent_resolvePathFromState","navigate","parent_navigate","nextState","nextStateScoped","state","options","nextScopedState","scopedRouter","useMemo","Provider","value","RouterProvider","onNavigate","routerProp","opts","intentName","parameters","payload","Array","isArray","encode","navigateIntent","EMPTY_STATE","useStateLink","toIndex","console","error","StateLink","VALID_PARAM_SEGMENT","createSegment","segment","startsWith","paramName","substring","test","addendum","includes","type","name","_parseRoute","route","pathname","split","segments","map","filter","Boolean","raw","debug","Debug","arrayify","val","matchPath","node","parts","segmentsLength","length","isMatching","every","i","transform","toState","rest","slice","childState","some","childNode","join","mergedState","_resolveStateFromPath","pathMatch","isRecord","isPlainObject","createMatchResult","nodes","missing","remaining","_findMatchingRoutes","_state","requiredParams","seg","stateKeys","keys","consumedParams","intersection","missingParams","difference","remainingParams","remainingState","pick","matchingChild","_resolvePathFromState","match","JSON","stringify","relative","flatten","matchNode","toPath","decodeJsonParams","pathsegment","decodeURIComponent","parse","atob","err","warn","encodeJsonParams","btoa","decodeParams","pathSegment","reduce","pair","encodeParams","entries","encodeURIComponent","create","createRoute","routeScope","intents","routeIntents","normalizeChildren","isRoute","normalizeArgs","childrenOrOpts","routeOrOpts","createNode","scopeName","normalize","paths","acc","concat","base","basePath","isRoot","TypeError","parsedRoute","_isRoute","decode","_path","isNotFound","getBasePath","getRedirectBase","useRouterState","selector","identity","selectedState","setState","useState","useEffect","withRouter","Component","WithRouter","displayName"],"mappings":"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"}