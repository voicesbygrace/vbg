{"version":3,"file":"index.js","sources":["../src/aliases.ts","../src/helpers.ts","../src/sanityMonorepo.ts","../src/debug.ts","../src/renderDocument.ts","../src/vite/plugin-sanity-build-entries.ts","../src/vite/plugin-sanity-dot-workaround.ts","../src/vite/plugin-sanity-runtime-rewrite.ts","../src/webManifest.ts","../src/vite/plugin-sanity-favicons.ts","../src/getViteConfig.ts","../src/getEntryModule.ts","../src/sanityConfig.ts","../src/runtime.ts","../src/buildStaticFiles.ts","../src/devServer.ts","../src/previewServer.ts"],"sourcesContent":["import path from 'path'\nimport type {SanityMonorepo} from './sanityMonorepo'\n\n/**\n * Returns an object of aliases for vite to use\n *\n * @internal\n */\nexport function getAliases(opts: {monorepo?: SanityMonorepo}): Record<string, string> {\n  const {monorepo} = opts\n\n  if (!monorepo?.path) {\n    return {}\n  }\n\n  // Load monorepo aliases (if the current Studio is located within the sanity monorepo)\n  // This is done in order for the Vite server to use the source files instead of\n  // the compiled output, allowing for a better dev experience.\n  const aliasesPath = path.resolve(monorepo.path, 'dev/aliases.cjs')\n\n  // eslint-disable-next-line import/no-dynamic-require\n  const devAliases: Record<string, string> = require(aliasesPath)\n\n  const monorepoAliases = Object.fromEntries(\n    Object.entries(devAliases).map(([key, modulePath]) => {\n      return [key, path.resolve(monorepo.path, modulePath)]\n    })\n  )\n\n  return monorepoAliases\n}\n","import path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport resolveFrom from 'resolve-from'\n\n/**\n * Given a module name such as \"styled-components\", will resolve the _module path_,\n * eg if require.resolve(`styled-components`) resolves to:\n *   `/some/node_modules/styled-components/lib/cjs/styled.js`\n * this function will instead return\n *   `/some/node_modules/styled-components`\n *\n * This is done in order for aliases to be pointing to the right module in terms of\n * _file-system location_, without pointing to a specific commonjs/browser/module variant\n *\n * @internal\n */\nexport async function getModulePath(mod: string, fromDir: string): Promise<string> {\n  const modulePath = resolveFrom(fromDir, mod)\n  const pkg = await readPkgUp({cwd: path.dirname(modulePath)})\n\n  return pkg ? path.dirname(pkg.path) : modulePath\n}\n\n/**\n * @internal\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Ensures that the given path both starts and ends with a single slash\n *\n * @internal\n */\nexport function normalizeBasePath(pathName: string): string {\n  return `/${pathName}/`.replace(/^\\/+/, '/').replace(/\\/+$/, '/')\n}\n","import path from 'path'\nimport readPkgUp from 'read-pkg-up'\n\n/**\n * @internal\n */\nexport interface SanityMonorepo {\n  path: string\n}\n\n/**\n * Load information about the `sanity-io/sanity` monorepo (if applicable)\n *\n * @internal\n */\nexport async function loadSanityMonorepo(cwd: string): Promise<SanityMonorepo | undefined> {\n  let p = cwd\n\n  while (p !== '/') {\n    const readResult = await readPkgUp({cwd: p})\n\n    if (!readResult) {\n      return undefined\n    }\n\n    if (readResult.packageJson.isSanityMonorepo) {\n      return {path: path.dirname(readResult.path)}\n    }\n\n    p = path.dirname(path.dirname(readResult.path))\n  }\n\n  return undefined\n}\n","import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:server')\n","/**\n * Looks for and imports (in preferred order):\n *   - src/_document.js\n *   - src/_document.tsx\n *\n * Then renders using ReactDOM to a string, which is sent back to the parent\n * process over the worker `postMessage` channel.\n */\nimport fs from 'fs'\nimport path from 'path'\nimport {Worker, parentPort, workerData, isMainThread} from 'worker_threads'\nimport chalk from 'chalk'\nimport importFresh from 'import-fresh'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport {createElement} from 'react'\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport {getAliases} from './aliases'\nimport {SanityMonorepo} from './sanityMonorepo'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('renderDocument')\n\n// Don't use threads in the jest world\n// eslint-disable-next-line no-process-env\nconst useThreads = typeof process.env.JEST_WORKER_ID === 'undefined'\nconst hasWarnedAbout = new Set<string>()\n\nconst defaultProps = {\n  entryPath: './.sanity/runtime/app.js',\n}\n\nconst autoGeneratedWarning = `\nThis file is auto-generated from \"sanity dev\".\nModifications to this file is automatically discarded.\n\nTo customize the rendering of this file, see\n${generateHelpUrl('custom-document-component')}\n`.trim()\n\ninterface DocumentProps {\n  entryPath?: string\n  css?: string[]\n}\n\nexport function renderDocument(options: {\n  monorepo?: SanityMonorepo\n  studioRootPath: string\n  props?: DocumentProps\n}): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!useThreads) {\n      resolve(getDocumentHtml(options.studioRootPath, options.props))\n      return\n    }\n\n    debug('Starting worker thread for %s', __filename)\n    const worker = new Worker(__filename, {\n      execArgv: __DEV__ ? ['-r', 'esbuild-register'] : undefined,\n      workerData: {...options, shouldWarn: true},\n    })\n\n    worker.on('message', (msg) => {\n      if (msg.type === 'warning') {\n        if (hasWarnedAbout.has(msg.warnKey)) {\n          return\n        }\n\n        if (Array.isArray(msg.message)) {\n          msg.message.forEach((warning: string) =>\n            console.warn(`${chalk.yellow('[warn]')} ${warning}`)\n          )\n        } else {\n          console.warn(`${chalk.yellow('[warn]')} ${msg.message}`)\n        }\n\n        hasWarnedAbout.add(msg.warnKey)\n        return\n      }\n\n      if (msg.type === 'error') {\n        debug('Error from worker: %s', msg.error || 'Unknown error')\n        reject(new Error(msg.error || 'Document rendering worker stopped with an unknown error'))\n        return\n      }\n\n      if (msg.type === 'result') {\n        debug('Document HTML rendered, %d bytes', msg.html.length)\n        resolve(msg.html)\n      }\n    })\n    worker.on('error', (err) => {\n      debug('Worker errored: %s', err.message)\n      reject(err)\n    })\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        debug('Worker stopped with code %d', code)\n        reject(new Error(`Document rendering worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function decorateIndexWithAutoGeneratedWarning(template: string): string {\n  return template.replace(/<head/, `\\n<!--\\n${autoGeneratedWarning}\\n-->\\n<head`)\n}\n\nexport function getPossibleDocumentComponentLocations(studioRootPath: string): string[] {\n  return [path.join(studioRootPath, '_document.js'), path.join(studioRootPath, '_document.tsx')]\n}\n\nif (!isMainThread) {\n  renderDocumentFromWorkerData()\n}\n\nfunction renderDocumentFromWorkerData() {\n  if (!parentPort || !workerData) {\n    throw new Error('Must be used as a Worker with a valid options object in worker data')\n  }\n\n  const {monorepo, studioRootPath, props} = workerData || {}\n\n  if (typeof studioRootPath !== 'string') {\n    parentPort.postMessage({type: 'error', message: 'Missing/invalid `studioRootPath` option'})\n    return\n  }\n\n  if (props && typeof props !== 'object') {\n    parentPort.postMessage({type: 'error', message: '`props` must be an object if provided'})\n    return\n  }\n\n  // Require hook #1\n  // Alias monorepo modules\n  debug('Registering potential aliases')\n  require('module-alias').addAliases(getAliases({monorepo}))\n\n  // Require hook #2\n  // Use `esbuild` to allow JSX/TypeScript and modern JS features\n  debug('Registering esbuild for node %s', process.version)\n  const {unregister} = require('esbuild-register/dist/node').register({\n    target: `node${process.version.slice(1)}`,\n    extensions: ['.jsx', '.ts', '.tsx', '.mjs'],\n  })\n\n  // Require hook #3\n  // Same as above, but we don't want to enforce a .jsx extension for anything with JSX\n  debug('Registering esbuild for .js files using jsx loader')\n  const {unregister: unregisterJs} = require('esbuild-register/dist/node').register({\n    target: `node${process.version.slice(1)}`,\n    extensions: ['.js'],\n    loader: 'jsx',\n  })\n\n  const html = getDocumentHtml(studioRootPath, props)\n\n  parentPort.postMessage({type: 'result', html})\n\n  // Be polite and clean up after esbuild-register\n  unregister()\n  unregisterJs()\n}\n\nfunction getDocumentHtml(studioRootPath: string, props?: DocumentProps): string {\n  const Document = getDocumentComponent(studioRootPath)\n\n  // NOTE: Validate the list of CSS paths so implementers of `_document.tsx` don't have to\n  // - If the path is not a full URL, check if it starts with `/`\n  //   - If not, then prepend a `/` to the string\n  const css = props?.css?.map((url) => {\n    try {\n      // If the URL is absolute, we don't need to prefix it\n      return new URL(url).toString()\n    } catch {\n      return url.startsWith('/') ? url : `/${url}`\n    }\n  })\n\n  debug('Rendering document component using React')\n  const result = renderToStaticMarkup(createElement(Document, {...defaultProps, ...props, css}))\n  return `<!DOCTYPE html>${result}`\n}\n\nfunction getDocumentComponent(studioRootPath: string) {\n  debug('Loading default document component from `sanity` module')\n  const {DefaultDocument} = require('sanity')\n\n  debug('Attempting to load user-defined document component from %s', studioRootPath)\n  const userDefined = tryLoadDocumentComponent(studioRootPath)\n\n  if (!userDefined) {\n    debug('Using default document component')\n    return DefaultDocument\n  }\n\n  debug('Found user defined document component at %s', userDefined.path)\n\n  const DocumentComp = userDefined.component.default\n  if (typeof DocumentComp === 'function') {\n    debug('User defined document component is a function, assuming valid')\n    return DocumentComp\n  }\n\n  debug('User defined document component did not have a default export')\n  const userExports = Object.keys(userDefined.component).join(', ') || 'None'\n  const relativePath = path.relative(process.cwd(), userDefined.path)\n  const typeHint =\n    typeof userDefined.component.default === 'undefined'\n      ? ''\n      : ` (type was ${typeof userDefined.component.default})`\n\n  const warnKey = `${relativePath}/${userDefined.modified}`\n\n  parentPort?.postMessage({\n    type: 'warning',\n    message: [\n      `${relativePath} did not have a default export that is a React component${typeHint}`,\n      `Found named exports/properties: ${userExports}`.trim(),\n      `Using default document component from \"sanity\".`,\n    ],\n    warnKey,\n  })\n\n  return DefaultDocument\n}\n\nfunction tryLoadDocumentComponent(studioRootPath: string) {\n  const locations = getPossibleDocumentComponentLocations(studioRootPath)\n\n  for (const componentPath of locations) {\n    debug('Trying to load document component from %s', componentPath)\n    try {\n      return {\n        // eslint-disable-next-line import/no-dynamic-require\n        component: importFresh<any>(componentPath),\n        path: componentPath,\n        // eslint-disable-next-line no-sync\n        modified: Math.floor(fs.statSync(componentPath)?.mtimeMs),\n      }\n    } catch (err) {\n      // Allow \"not found\" errors\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        debug('Failed to load document component: %s', err.message)\n        throw err\n      }\n\n      debug('Document component not found at %s', componentPath)\n    }\n  }\n\n  return null\n}\n","import type {ChunkMetadata, Plugin} from 'vite'\nimport type {SanityMonorepo} from '../sanityMonorepo'\nimport {renderDocument} from '../renderDocument'\n\ninterface ViteOutputBundle {\n  [fileName: string]: ViteRenderedChunk\n}\n\ninterface ViteRenderedChunk {\n  code: string\n  imports: string[]\n  viteMetadata: ChunkMetadata\n}\n\nexport function sanityBuildEntries(options: {\n  cwd: string\n  monorepo: SanityMonorepo | undefined\n  basePath: string\n}): Plugin {\n  const {cwd, monorepo, basePath} = options\n\n  let entryChunkRef: string\n\n  return {\n    name: '@sanity/server/build-entries',\n    apply: 'build',\n\n    buildStart() {\n      entryChunkRef = this.emitFile({\n        type: 'chunk',\n        id: '.sanity/runtime/app.js',\n        name: 'sanity',\n      })\n    },\n\n    async generateBundle(_options, outputBundle) {\n      const bundle = outputBundle as unknown as ViteOutputBundle\n\n      const entryFileName = this.getFileName(entryChunkRef)\n      const entryFile = bundle[entryFileName]\n      if (!entryFile) {\n        throw new Error(`Failed to find entry file in bundle (${entryFileName})`)\n      }\n\n      const entryPath = [basePath.replace(/\\/+$/, ''), entryFileName].join('/')\n\n      let css: string[] = []\n      if (entryFile.viteMetadata?.importedCss) {\n        // Check all the top-level imports of the entryPoint to see if they have\n        // static CSS assets that need loading\n        css = [...entryFile.viteMetadata.importedCss]\n        for (const key of entryFile.imports) {\n          // Traverse all CSS assets that isn't loaded by the runtime and\n          // need <link> tags in the HTML template\n          const importedCss = bundle[key]?.viteMetadata?.importedCss\n          if (importedCss) {\n            css.push(...importedCss)\n          }\n        }\n      }\n\n      this.emitFile({\n        type: 'asset',\n        fileName: 'index.html',\n        source: await renderDocument({\n          monorepo,\n          studioRootPath: cwd,\n          props: {\n            entryPath,\n            css,\n          },\n        }),\n      })\n    },\n  }\n}\n","import fs from 'fs'\nimport path from 'path'\nimport {Plugin} from 'vite'\nimport history from 'connect-history-api-fallback'\n\n/**\n * This is a Vite plugin for supporting locations containing `.` in their pathname.\n *\n * @see https://github.com/vitejs/vite/issues/2245\n */\nexport function sanityDotWorkaroundPlugin(): Plugin {\n  return {\n    name: '@sanity/server/dot-workaround',\n    configureServer(server) {\n      const {root} = server.config\n\n      return () => {\n        const handler = history({\n          disableDotRule: true,\n          rewrites: [\n            {\n              from: /\\/index.html$/,\n              to: ({parsedUrl}) => {\n                const pathname = parsedUrl.pathname\n\n                if (pathname && fs.existsSync(path.join(root, pathname))) {\n                  return pathname\n                }\n\n                return `/index.html`\n              },\n            },\n          ],\n        })\n\n        server.middlewares.use((req, res, next) => {\n          handler(req as any, res as any, next)\n        })\n      }\n    },\n  }\n}\n","import type {Plugin} from 'vite'\n\nexport function sanityRuntimeRewritePlugin(): Plugin {\n  return {\n    name: '@sanity/server/sanity-runtime-rewrite',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      return () => {\n        viteDevServer.middlewares.use((req, res, next) => {\n          if (req.url === '/index.html') {\n            req.url = '/.sanity/runtime/index.html'\n          }\n\n          next()\n        })\n      }\n    },\n  }\n}\n","export interface WebManifest {\n  icons: {\n    src: string\n    type: string\n    sizes: string\n  }[]\n}\n\nexport function generateWebManifest(basePath: string): WebManifest {\n  return {\n    icons: [\n      {src: `${basePath}/favicon-192.png`, type: 'image/png', sizes: '192x192'},\n      {src: `${basePath}/favicon-512.png`, type: 'image/png', sizes: '512x512'},\n    ],\n  }\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport type {Plugin} from 'vite'\nimport {generateWebManifest} from '../webManifest'\n\nconst mimeTypes: Record<string, string | undefined> = {\n  '.ico': 'image/x-icon',\n  '.svg': 'image/svg+xml',\n  '.png': 'image/png',\n}\n\nexport function sanityFaviconsPlugin({\n  faviconsPath,\n  staticUrlPath,\n}: {\n  faviconsPath: string\n  staticUrlPath: string\n}): Plugin {\n  const cache: {favicons?: string[]} = {}\n\n  async function getFavicons(): Promise<string[]> {\n    if (cache.favicons) {\n      return cache.favicons\n    }\n\n    cache.favicons = await fs.readdir(faviconsPath)\n    return cache.favicons\n  }\n\n  return {\n    name: '@sanity/server/sanity-favicons',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      const webManifest = JSON.stringify(generateWebManifest(staticUrlPath), null, 2)\n      const webManifestPath = `${staticUrlPath}/manifest.webmanifest`\n\n      return () => {\n        viteDevServer.middlewares.use(async (req, res, next) => {\n          if (req.url?.endsWith(webManifestPath)) {\n            res.writeHead(200, 'OK', {'content-type': 'application/manifest+json'})\n            res.write(webManifest)\n            res.end()\n            return\n          }\n\n          const parsedUrl =\n            (req as any)._parsedUrl || new URL(req.url || '/', 'http://localhost:3333')\n\n          const icons = await getFavicons()\n          const fileName = path.basename(parsedUrl.pathname || '')\n          if (!icons.includes(fileName)) {\n            next()\n            return\n          }\n\n          const mimeType = mimeTypes[path.extname(fileName)] || 'application/octet-stream'\n          res.writeHead(200, 'OK', {'content-type': mimeType})\n          res.write(await fs.readFile(path.join(faviconsPath, fileName)))\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import path from 'path'\nimport type {InlineConfig} from 'vite'\nimport viteReact from '@vitejs/plugin-react'\nimport {getAliases} from './aliases'\nimport {normalizeBasePath} from './helpers'\nimport {loadSanityMonorepo} from './sanityMonorepo'\nimport {sanityBuildEntries} from './vite/plugin-sanity-build-entries'\nimport {sanityDotWorkaroundPlugin} from './vite/plugin-sanity-dot-workaround'\nimport {sanityRuntimeRewritePlugin} from './vite/plugin-sanity-runtime-rewrite'\nimport {sanityFaviconsPlugin} from './vite/plugin-sanity-favicons'\n\nexport interface ViteOptions {\n  /**\n   * Root path of the studio/sanity app\n   */\n  cwd: string\n\n  /**\n   * Base path (eg under where to serve the app - `/studio` or similar)\n   * Will be normalized by `getViteConfig` to ensure it starts and end with a `/`\n   */\n  basePath?: string\n\n  /**\n   * Output directory (eg where to place the built files, if any)\n   */\n  outputDir?: string\n\n  /**\n   * Whether or not to enable source maps\n   */\n  sourceMap?: boolean\n\n  /**\n   * Whether or not to minify the output (only used in `mode: 'production'`)\n   */\n  minify?: boolean\n\n  /**\n   * HTTP development server configuration\n   */\n  server?: {port?: number; host?: string}\n\n  /**\n   * Mode to run vite in - eg development or production\n   */\n  mode: 'development' | 'production'\n}\n\n/**\n * Get a configuration object for Vite based on the passed options\n *\n * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally\n */\nexport async function getViteConfig(options: ViteOptions): Promise<InlineConfig> {\n  const {\n    cwd,\n    mode,\n    outputDir,\n    // default to `true` when `mode=development`\n    sourceMap = options.mode === 'development',\n    server,\n    minify,\n    basePath: rawBasePath = '/',\n  } = options\n\n  const monorepo = await loadSanityMonorepo(cwd)\n  const basePath = normalizeBasePath(rawBasePath)\n  const faviconsPath = path.resolve(__dirname, '../static/favicons')\n  const staticPath = `${basePath}static`\n\n  const viteConfig: InlineConfig = {\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite',\n    root: cwd,\n    base: basePath,\n    build: {\n      outDir: outputDir || path.resolve(cwd, 'dist'),\n      sourcemap: sourceMap,\n    },\n    server: {\n      base: basePath,\n      host: server?.host,\n      port: server?.port || 3333,\n      strictPort: true,\n    },\n    configFile: false,\n    mode,\n    plugins: [\n      viteReact(),\n      sanityFaviconsPlugin({faviconsPath, staticUrlPath: staticPath}),\n      sanityDotWorkaroundPlugin(),\n      sanityRuntimeRewritePlugin(),\n      sanityBuildEntries({basePath, cwd, monorepo}),\n    ],\n    envPrefix: 'SANITY_STUDIO_',\n    logLevel: mode === 'production' ? 'silent' : 'info',\n    resolve: {\n      alias: getAliases({monorepo}),\n    },\n    define: {\n      __SANITY_STAGING__: process.env.SANITY_INTERNAL_ENV === 'staging',\n    },\n  }\n\n  if (mode === 'production') {\n    viteConfig.build = {\n      ...viteConfig.build,\n\n      assetsDir: 'static',\n      minify: minify ? 'esbuild' : false,\n      emptyOutDir: false, // Rely on CLI to do this\n\n      rollupOptions: {\n        input: {\n          sanity: path.join(cwd, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    }\n  }\n\n  return viteConfig\n}\n\n/**\n * Ensure Sanity entry chunk is always loaded\n *\n * @param config - User-modified configuration\n * @returns Merged configuration\n * @internal\n */\nexport function finalizeViteConfig(config: InlineConfig): InlineConfig {\n  if (typeof config.build?.rollupOptions?.input !== 'object') {\n    throw new Error(\n      'Vite config must contain `build.rollupOptions.input`, and it must be an object'\n    )\n  }\n\n  if (!config.root) {\n    throw new Error(\n      'Vite config must contain `root` property, and must point to the Sanity root directory'\n    )\n  }\n\n  return {\n    ...config,\n    build: {\n      ...config.build,\n      rollupOptions: {\n        ...config.build.rollupOptions,\n        input: {\n          ...config.build.rollupOptions.input,\n          sanity: path.join(config.root, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    },\n  }\n}\n","const entryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\nimport studioConfig from %STUDIO_CONFIG_LOCATION%\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  %STUDIO_REACT_STRICT_MODE%\n)\n`\n\nexport function getEntryModule(options: {\n  reactStrictMode: boolean\n  relativeConfigLocation: string\n}): string {\n  return entryModule\n    .replace(/%STUDIO_REACT_STRICT_MODE%/, JSON.stringify(Boolean(options.reactStrictMode)))\n    .replace(/%STUDIO_CONFIG_LOCATION%/, JSON.stringify(options.relativeConfigLocation))\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('config')\n\n/**\n * Resolves the path to the studio configuration file with the following extensions,\n * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)\n *\n * Falls back to the default studio configuration exported by `sanity` if none is found\n *\n * @internal\n */\nexport async function getSanityStudioConfigPath(studioRootPath: string): Promise<string> {\n  const configPaths = [\n    path.join(studioRootPath, 'sanity.config.mjs'),\n    path.join(studioRootPath, 'sanity.config.js'),\n    path.join(studioRootPath, 'sanity.config.ts'),\n    path.join(studioRootPath, 'sanity.config.jsx'),\n    path.join(studioRootPath, 'sanity.config.tsx'),\n  ]\n\n  debug('Looking for configuration file in %d possible locations', configPaths.length)\n  const configs = await Promise.all(\n    configPaths.map(async (configPath) => ({\n      path: configPath,\n      exists: await fileExists(configPath),\n    }))\n  )\n\n  const availableConfigs = configs.filter((config) => config.exists)\n  debug('Found %d available configuration files', availableConfigs.length)\n\n  // No config file exists?\n  if (availableConfigs.length === 0) {\n    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config')\n    return path.resolve(__dirname, './default-config.js')\n  }\n\n  if (availableConfigs.length > 1) {\n    console.warn('Found multiple potential studio configs:')\n    availableConfigs.forEach((config) => console.warn(` - ${config.path}`))\n    console.warn(`Using ${availableConfigs[0].path}`)\n  }\n\n  return availableConfigs[0].path\n}\n\n/**\n * Asynchronously checks if a file exists. This is prone to race conditions,\n * as the file can exist/not exist by the time this resolves, but in this\n * case this is an acceptable trade-off. Best effort, and all that.\n */\nfunction fileExists(filePath: string): Promise<boolean> {\n  return fs.stat(filePath).then(\n    () => true,\n    () => false\n  )\n}\n","import fs from 'fs/promises'\nimport path from 'path'\nimport chokidar from 'chokidar'\nimport {debug as serverDebug} from './debug'\nimport {getEntryModule} from './getEntryModule'\nimport {getSanityStudioConfigPath} from './sanityConfig'\nimport {loadSanityMonorepo} from './sanityMonorepo'\nimport {\n  decorateIndexWithAutoGeneratedWarning,\n  getPossibleDocumentComponentLocations,\n  renderDocument,\n} from './renderDocument'\n\nconst debug = serverDebug.extend('runtime')\n\nexport interface RuntimeOptions {\n  cwd: string\n  reactStrictMode: boolean\n  watch: boolean\n}\n\n/**\n * Generates the `.sanity/runtime` directory, and optionally watches for custom\n * document files, rebuilding when they change\n *\n * @param options - Current working directory (Sanity root dir), and whether or not to watch\n * @internal\n */\nexport async function writeSanityRuntime({\n  cwd,\n  reactStrictMode,\n  watch,\n}: RuntimeOptions): Promise<void> {\n  debug('Resolving Sanity monorepo information')\n  const monorepo = await loadSanityMonorepo(cwd)\n  const runtimeDir = path.join(cwd, '.sanity', 'runtime')\n\n  debug('Making runtime directory')\n  await fs.mkdir(runtimeDir, {recursive: true})\n\n  async function renderAndWriteDocument() {\n    debug('Rendering document template')\n    const indexHtml = decorateIndexWithAutoGeneratedWarning(\n      await renderDocument({\n        studioRootPath: cwd,\n        monorepo,\n        props: {entryPath: `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`},\n      })\n    )\n\n    debug('Writing index.html to runtime directory')\n    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)\n  }\n\n  if (watch) {\n    chokidar\n      .watch(getPossibleDocumentComponentLocations(cwd))\n      .on('all', () => renderAndWriteDocument())\n  }\n\n  await renderAndWriteDocument()\n\n  debug('Writing app.js to runtime directory')\n  const studioConfigPath = await getSanityStudioConfigPath(cwd)\n  const relativeConfigLocation = path.relative(runtimeDir, studioConfigPath)\n  await fs.writeFile(\n    path.join(runtimeDir, 'app.js'),\n    getEntryModule({reactStrictMode, relativeConfigLocation})\n  )\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport {constants as fsConstants} from 'fs'\nimport {build, InlineConfig} from 'vite'\nimport {finalizeViteConfig, getViteConfig} from './getViteConfig'\nimport {generateWebManifest} from './webManifest'\nimport {writeSanityRuntime} from './runtime'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('static')\n\nexport interface ChunkModule {\n  name: string\n  originalLength: number\n  renderedLength: number\n}\n\nexport interface ChunkStats {\n  name: string\n  modules: ChunkModule[]\n}\n\nexport interface StaticBuildOptions {\n  cwd: string\n  basePath: string\n  outputDir: string\n  minify?: boolean\n  profile?: boolean\n  sourceMap?: boolean\n\n  vite?: (config: InlineConfig) => InlineConfig\n}\n\nexport async function buildStaticFiles(\n  options: StaticBuildOptions\n): Promise<{chunks: ChunkStats[]}> {\n  const {\n    cwd,\n    outputDir,\n    sourceMap = false,\n    minify = true,\n    basePath,\n    vite: extendViteConfig,\n  } = options\n\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode: false, watch: false})\n\n  debug('Resolving vite config')\n  let viteConfig = await getViteConfig({\n    cwd,\n    basePath,\n    outputDir,\n    minify,\n    sourceMap,\n    mode: 'production',\n  })\n\n  if (extendViteConfig) {\n    debug('Extending vite config with user-specified config')\n    viteConfig = finalizeViteConfig(extendViteConfig(viteConfig))\n  }\n\n  // Copy files placed in /static to the built /static\n  debug('Copying static files from /static to output dir')\n  const staticPath = path.join(outputDir, 'static')\n  await copyDir(path.join(cwd, 'static'), staticPath)\n\n  // Write favicons, not overwriting ones that already exist, to static folder\n  debug('Writing favicons to output dir')\n  const faviconBasePath = `${basePath.replace(/\\/+$/, '')}/static`\n  await writeFavicons(faviconBasePath, staticPath)\n\n  debug('Bundling using vite')\n  const bundle = await build(viteConfig)\n  debug('Bundling complete')\n\n  // For typescript only - this shouldn't ever be the case given we're not watching\n  if (Array.isArray(bundle) || !('output' in bundle)) {\n    return {chunks: []}\n  }\n\n  const stats: ChunkStats[] = []\n  bundle.output.forEach((chunk) => {\n    if (chunk.type !== 'chunk') {\n      return\n    }\n\n    stats.push({\n      name: chunk.name,\n      modules: Object.entries(chunk.modules).map(([rawFilePath, chunkModule]) => {\n        const filePath = rawFilePath.startsWith('\\x00')\n          ? rawFilePath.slice('\\x00'.length)\n          : rawFilePath\n\n        return {\n          name: path.isAbsolute(filePath) ? path.relative(cwd, filePath) : filePath,\n          originalLength: chunkModule.originalLength,\n          renderedLength: chunkModule.renderedLength,\n        }\n      }),\n    })\n  })\n\n  return {chunks: stats}\n}\n\nasync function copyDir(srcDir: string, destDir: string, skipExisting?: boolean): Promise<void> {\n  await fs.mkdir(destDir, {recursive: true})\n\n  for (const file of await tryReadDir(srcDir)) {\n    const srcFile = path.resolve(srcDir, file)\n    if (srcFile === destDir) {\n      continue\n    }\n\n    const destFile = path.resolve(destDir, file)\n    const stat = await fs.stat(srcFile)\n\n    if (stat.isDirectory()) {\n      await copyDir(srcFile, destFile, skipExisting)\n    } else if (skipExisting) {\n      await fs.copyFile(srcFile, destFile, fsConstants.COPYFILE_EXCL).catch(skipIfExistsError)\n    } else {\n      await fs.copyFile(srcFile, destFile)\n    }\n  }\n}\n\nasync function tryReadDir(dir: string): Promise<string[]> {\n  try {\n    const content = await fs.readdir(dir)\n    return content\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return []\n    }\n\n    throw err\n  }\n}\n\nfunction skipIfExistsError(err: Error & {code: string}) {\n  if (err.code === 'EEXIST') {\n    return\n  }\n\n  throw err\n}\n\nasync function writeFavicons(basePath: string, destDir: string): Promise<void> {\n  await fs.mkdir(destDir, {recursive: true})\n  await copyDir(path.resolve(__dirname, '../static/favicons'), destDir, true)\n  await writeWebManifest(basePath, destDir)\n}\n\nasync function writeWebManifest(basePath: string, destDir: string): Promise<void> {\n  const content = JSON.stringify(generateWebManifest(basePath), null, 2)\n  await fs\n    .writeFile(path.join(destDir, 'manifest.webmanifest'), content, 'utf8')\n    .catch(skipIfExistsError)\n}\n","import chalk from 'chalk'\nimport {createServer, InlineConfig} from 'vite'\nimport {getViteConfig} from './getViteConfig'\nimport {debug} from './debug'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  vite?: (config: InlineConfig) => InlineConfig\n}\n\nexport interface DevServer {\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {cwd, httpPort, httpHost, basePath: base, reactStrictMode, vite: extendViteConfig} = options\n\n  const startTime = Date.now()\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true})\n\n  debug('Resolving vite config')\n  let viteConfig = await getViteConfig({\n    basePath: base || '/',\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n  })\n\n  if (extendViteConfig) {\n    debug('Extending vite config using user-specified function')\n    viteConfig = extendViteConfig(viteConfig)\n  }\n\n  debug('Creating vite server')\n  const server = await createServer(viteConfig)\n  const info = server.config.logger.info\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  const startupDuration = Date.now() - startTime\n  const url = `http://${httpHost || 'localhost'}:${httpPort || '3333'}`\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)}`\n  )\n\n  return {close: () => server.close()}\n}\n","import fs from 'fs'\nimport path from 'path'\nimport chalk from 'chalk'\nimport {InlineConfig, preview} from 'vite'\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('preview')\n\nexport interface PreviewServer {\n  urls: {local: string[]; network: string[]}\n  close(): Promise<void>\n}\n\nexport interface PreviewServerOptions {\n  root: string\n  cwd: string\n  basePath: string\n\n  httpPort: number\n  httpHost?: string\n\n  vite?: (config: InlineConfig) => InlineConfig\n}\n\nexport async function startPreviewServer(options: PreviewServerOptions): Promise<PreviewServer> {\n  const {httpPort, httpHost, basePath: base, root} = options\n  const startTime = Date.now()\n\n  // eslint-disable-next-line no-sync\n  if (!fs.existsSync(path.join(root, 'index.html'))) {\n    const err = new Error(\n      `Could not find a production build in the '${root}' directory. Try building your studio app with 'sanity build' before starting the preview server.`\n    )\n    err.name = 'BUILD_NOT_FOUND'\n    throw err\n  }\n\n  const previewConfig: InlineConfig = {\n    root,\n    base: base || '/',\n    configFile: false,\n    preview: {\n      port: httpPort,\n      host: httpHost,\n      strictPort: true,\n    },\n    // Needed for vite to not serve `root/dist`\n    build: {\n      outDir: root,\n    },\n  }\n\n  debug('Creating vite server')\n  const server = await preview(previewConfig)\n  const info = server.config.logger.info\n  const url = server.resolvedUrls.local[0]\n\n  const startupDuration = Date.now() - startTime\n\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)} (production preview mode)`\n  )\n\n  return {\n    urls: server.resolvedUrls,\n    close: () =>\n      new Promise((resolve, reject) =>\n        server.httpServer.close((err) => (err ? reject(err) : resolve()))\n      ),\n  }\n}\n"],"names":["getAliases","opts","monorepo","path","aliasesPath","resolve","devAliases","require","monorepoAliases","Object","fromEntries","entries","map","key","modulePath","normalizeBasePath","pathName","replace","loadSanityMonorepo","cwd","p","readResult","readPkgUp","packageJson","isSanityMonorepo","dirname","debug","debugIt","serverDebug","extend","useThreads","process","env","JEST_WORKER_ID","hasWarnedAbout","Set","defaultProps","entryPath","autoGeneratedWarning","generateHelpUrl","trim","renderDocument","options","Promise","reject","getDocumentHtml","studioRootPath","props","__filename","worker","Worker","execArgv","workerData","shouldWarn","on","msg","type","has","warnKey","Array","isArray","message","forEach","warning","console","warn","chalk","yellow","add","error","Error","html","length","err","code","decorateIndexWithAutoGeneratedWarning","template","getPossibleDocumentComponentLocations","join","isMainThread","renderDocumentFromWorkerData","parentPort","postMessage","addAliases","version","unregister","register","target","slice","extensions","unregisterJs","loader","_a","Document","getDocumentComponent","css","url","URL","toString","startsWith","result","renderToStaticMarkup","createElement","DefaultDocument","userDefined","tryLoadDocumentComponent","DocumentComp","component","default","userExports","keys","relativePath","relative","typeHint","modified","locations","componentPath","importFresh","Math","floor","fs","statSync","mtimeMs","sanityBuildEntries","basePath","entryChunkRef","name","apply","buildStart","emitFile","id","generateBundle","_options","outputBundle","_b","_c","bundle","entryFileName","getFileName","entryFile","viteMetadata","importedCss","imports","push","fileName","source","sanityDotWorkaroundPlugin","configureServer","server","root","config","handler","history","disableDotRule","rewrites","from","to","parsedUrl","pathname","existsSync","middlewares","use","req","res","next","sanityRuntimeRewritePlugin","viteDevServer","generateWebManifest","icons","src","sizes","mimeTypes","sanityFaviconsPlugin","faviconsPath","staticUrlPath","cache","getFavicons","favicons","readdir","webManifest","JSON","stringify","webManifestPath","endsWith","writeHead","write","end","_parsedUrl","basename","includes","mimeType","extname","readFile","getViteConfig","mode","outputDir","sourceMap","minify","rawBasePath","__dirname","staticPath","viteConfig","cacheDir","base","build","outDir","sourcemap","host","port","strictPort","configFile","plugins","viteReact","envPrefix","logLevel","alias","define","__SANITY_STAGING__","SANITY_INTERNAL_ENV","assetsDir","emptyOutDir","rollupOptions","input","sanity","finalizeViteConfig","entryModule","getEntryModule","Boolean","reactStrictMode","relativeConfigLocation","getSanityStudioConfigPath","configPaths","configs","all","configPath","exists","fileExists","availableConfigs","filter","filePath","stat","then","writeSanityRuntime","watch","runtimeDir","mkdir","recursive","renderAndWriteDocument","indexHtml","writeFile","chokidar","studioConfigPath","buildStaticFiles","vite","extendViteConfig","copyDir","faviconBasePath","writeFavicons","chunks","stats","output","chunk","modules","rawFilePath","chunkModule","isAbsolute","originalLength","renderedLength","srcDir","destDir","skipExisting","file","tryReadDir","srcFile","destFile","isDirectory","copyFile","fsConstants","COPYFILE_EXCL","catch","skipIfExistsError","dir","content","writeWebManifest","startDevServer","httpPort","httpHost","startTime","Date","now","createServer","info","logger","listen","startupDuration","cyan","ceil","close","startPreviewServer","previewConfig","preview","resolvedUrls","local","urls","httpServer"],"mappings":"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"}